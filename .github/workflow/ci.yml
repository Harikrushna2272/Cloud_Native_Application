# name: CI pipeline
# on:
#   push:
#     branches: ["main"]
# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#       - name: Set up Bun
#         uses: oven-sh/setup-bun@v1
#         with:
#           bun-version: latest
#       - name: Install Dependencies
#         run: bun install --frozen-lockfile
#       - name: TypeScript Type Check
#         run: bun run --bun tsc --noEmit
#       - name: Test with ESLint
#         run: bun run lint
#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#       - name: Extract metadata
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ghcr.io/${{ github.repository }}
#           tags: |
#             type=ref,event=branch
#             type=sha,prefix={{branch}}-
#       - name: Build and Push Docker Image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}


name: Docker CIname: Docker CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: false
          tags: myapp:latest
      - name: Test Docker container
        run: |
          echo "Starting container..."
          docker run -d -p 3000:3000 --name myapp myapp:latest
          echo "Waiting for server to start..."
          sleep 10
          echo "Checking /api/health endpoint..."
          curl -v -f http://localhost:3000/api/health || { echo "Health check failed"; docker logs myapp; exit 1; }
          echo "Stopping container..."
          docker stop myapp